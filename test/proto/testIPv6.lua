describe("IPv6 class", function()
	local pkt = require "packet"
	it("should parse", function()
		local ip = parseIP6Address("0123:4567:89AB:CDEF:1011:1213:1415:1617")
		assert.are.same(ip.uint32[0], 0x14151617)
		assert.are.same(ip.uint32[1], 0x10111213)
		assert.are.same(ip.uint32[2], 0x89ABCDEF)
		assert.are.same(ip.uint32[3], 0x01234567)
	end)
	it("should parse shortened addresses", function()
		local shortened1 = parseIP6Address("::")
		local shortened2 = parseIP6Address("1234:5678::")
		local shortened3 = parseIP6Address("::89ab:cdef")
		local shortened4 = parseIP6Address("1234::89ab:cdef")
		local full1 = parseIP6Address("0000:0000:0000:0000:0000:0000:0000:0000")
		local full2 = parseIP6Address("1234:5678:0000:0000:0000:0000:0000:0000")
		local full3 = parseIP6Address("0000:0000:0000:0000:0000:0000:89ab:cdef")
		local full4 = parseIP6Address("1234:0000:0000:0000:0000:0000:89ab:cdef")
		assert.are.same(shortened1, full1)
		assert.are.same(shortened2, full2)
		assert.are.same(shortened3, full3)
		assert.are.same(shortened4, full4)
	end)
	it("should support ==", function()
		local ip = parseIP6Address("0123:4567:89AB:CDEF:1011:1213:1415:1617")
		local ip2 = parseIP6Address("0123:4567:89AB:CDEF:1011:1213:1415:1617")
		local ip3 = parseIP6Address("0123:4567:89AB:CDEF:1011:1213:1415:1618")
		assert.are.same(ip, ip2)
		assert.are.not_same(ip, ip3)
		assert.are.not_same(ip, 0)
		-- objects of different types should be equal, so don't implement this
		assert.are.not_same(parseIP6Address("0000:0000:0000:0000:0000:0000:0000:0000"), "0000:0000:0000:0000:0000:0000:0000:0000")
		assert.are.not_same(parseIP6Address("0000:0000:0000:0000:0000:0000:0000:0000"), 0)
	end)
	it("should do arithmetic", function()
		-- TODO: more tests, but implement a proper parse function first
		local ip = parseIP6Address("0000:0000:0000:0000:0000:0000:0000:0000")
		ip = ip + 1
		assert.are.same(ip.uint32[0], 1)
		assert.are.same(ip.uint32[1], 0)
		assert.are.same(ip.uint32[2], 0)
		assert.are.same(ip.uint32[3], 0)
		ip = 0xFFFFFFFFFFFFFFFFULL + ip
		assert.are.same(ip.uint32[0], 0)
		assert.are.same(ip.uint32[1], 0)
		assert.are.same(ip.uint32[2], 1)
		assert.are.same(ip.uint32[3], 0)
		local subByAdd = ip + (-1)
		assert.are.same(subByAdd.uint32[0], 0xFFFFFFFF)
		assert.are.same(subByAdd.uint32[1], 0xFFFFFFFF)
		assert.are.same(subByAdd.uint32[2], 0)
		assert.are.same(subByAdd.uint32[3], 0)
		local subBySub = ip -1
		assert.are.same(subBySub.uint32[0], 0xFFFFFFFF)
		assert.are.same(subBySub.uint32[1], 0xFFFFFFFF)
		assert.are.same(subBySub.uint32[2], 0)
		assert.are.same(subBySub.uint32[3], 0)
	end)

end)

